{"version":3,"sources":["Tabs.js","getId.js","constants.js","copyObj.js","Editor.js","Root.js","index.js"],"names":["Tabs","props","newGraph","name","prompt","this","onGraphCreated","graph","setState","selectedGraphId","id","onTabChange","graphs","map","key","onSelect","handleGraphSelected","bind","isSelected","graphId","onClick","handleCreateNewGraph","React","Component","Tab","className","handleTabSelected","getId","allIds","Date","getTime","includes","URL","URL2","REQUEST_OPTIONS","mode","headers","VERTEX_SHAPE","Object","freeze","STROKED","FILLED","copyObj","obj","undefined","Error","JSON","parse","stringify","Editor","state","isDirected","paintingColor","paintMode","canvas","createRef","showVertexIds","isPainting","isDragging","draggingOffset","selectedVertex","clickTimer","vertexes","find","arcs","vertex","arc","vertex1","vertex2","push","fetch","method","body","catch","err","console","log","then","response","json","data","alert","matrix","trim","startNode","filter","v","selected","path","join","diameter","radius","center","isPlanar","setGraph","prepareGraph","planarGraph","updateGraphRequest","isTree","tree","g","secondGraph","cartesian","selectedVertexes","sort","v1","v2","timestamp","length","paths","x","y","shape","ids","some","id1","id2","angle12","sin","Math","sqrt","cos","angle21","updateAngles","selectedArcId","a1","a2","a","event","X","Y","setTimeout","VERTEX_RADIUS","forEach","color","getArcsFromId","createNewVertex","deleteSelectedVertexes","createNewArc","reduce","power","e","target","value","ctx","beginPath","lineWidth","strokeStyle","fillStyle","PI","stroke","fill","font","fillText","isLoop","point1","point2","moveTo","bezierCurveTo","lineTo","angle","atan2","R","canvasWidth","canvasHeight","checkArcs","clearRect","drawVertexes","drawArcs","current","onselectstart","getContext","setInterval","update","width","height","updateGraphReques","rect","getBoundingClientRect","clientX","left","clientY","top","style","cursor","border","ref","onMouseDown","handleMouseDown","getMouseEventWithOffset","onMouseMove","handleMouseMove","onMouseUp","handleMouseUp","onDoubleClick","handleDoubleClick","handleNewArc","handleSwapOrientation","handleDeleteArc","handleChangeName","handleSwitchShape","handleDeleteVertex","handlePaintMode","type","placeholder","onChange","handleColorChange","handleVertexCount","handleArcCount","handleVertexPower","incidenceMatrixRequest","hamiltonianPathRequest","findDiameterRequest","findRadiusRequest","findCenterRequest","planarCheckRequest","planarReductionRequest","cartesianRequest","tensorRequest","Root","isGraphListReady","isComponentMounted","getGraphList","graphList","preparedGraphList","prepareGraphList","g1","g2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cbb4bb0.chunk.js","sourcesContent":["import React from 'react'\r\nimport {v4 as uuid} from 'uuid'\r\n\r\nexport default class Tabs extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\t// this.state = {\r\n\t\t// \tgraphs: this.props.graphs,\r\n\t\t// \tselectedGraphId: this.props.graphId\r\n\t\t// };\r\n\t}\r\n\thandleCreateNewGraph() {\r\n\t    let newGraph = {name: prompt('Enter name of graph')};\r\n\t    this.props.onGraphCreated(newGraph);\r\n\t\t// this.setState({\r\n\t\t// \tgraphs: [...this.state.graphs, newGraph]\r\n\t\t// });\r\n\t}\r\n\thandleGraphSelected(graph) {\r\n\t\tthis.setState({selectedGraphId: graph.id});\r\n\t\tthis.props.onTabChange(graph.id);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{this.props.graphs.map(graph =>\r\n\t\t\t\t\t<Tab key={graph.id}\r\n\t\t\t\t\t\t graph={graph} \r\n\t\t\t\t\t\t onSelect={this.handleGraphSelected.bind(this)}\r\n\t\t\t\t\t\t isSelected={this.props.graphId === graph.id}/>\r\n\t\t\t\t)}\r\n\t\t\t\t<button onClick={this.handleCreateNewGraph.bind(this)}>+</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Tab extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t}\r\n\thandleTabSelected(){\r\n\t\tthis.props.onSelect(this.props.graph);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<button className=\"tab-button\" onClick={this.handleTabSelected.bind(this)}>\r\n\t\t\t\t{this.props.isSelected ? <b>{this.props.graph.name}</b> : this.props.graph.name}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n} ","const getId = (allIds) => {\r\n    let id = new Date().getTime() & 0x000000ffff;\r\n    while(allIds.includes(id))\r\n        id = new Date().getTime() & 0x000000ffff;\r\n    return id;\r\n};\r\n\r\nexport default getId;","export const URL = 'http://127.0.0.1:8000';\r\nexport const URL2 = 'http://127.0.0.1:9000';\r\nexport const REQUEST_OPTIONS = {\r\n    mode: 'cors',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    // cache: 'no-cache', credentials: 'same-origin',\r\n    // redirect: 'follow',\r\n    // referrerPolicy: 'no-referrer'\r\n};\r\n\r\nexport const VERTEX_SHAPE = Object.freeze({STROKED: 'STROKED', FILLED: 'FILLED'});\r\nexport const VERTEX_RADIUS = 10;","const copyObj = obj => {\r\n    if(obj === undefined) throw new Error('Object is undefined');\r\n    return JSON.parse(JSON.stringify(obj));\r\n};\r\n\r\nexport default copyObj;","import React from 'react'\r\n// import {v4 as uuid} from 'uuid'\r\nimport getId from \"./getId\"\r\nimport {VERTEX_SHAPE, VERTEX_RADIUS, URL, URL2, REQUEST_OPTIONS} from './constants'\r\nimport copyObj from \"./copyObj\";\r\n\r\n\r\nexport default class Editor extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isDirected: false,\r\n            paintingColor: '',\r\n            paintMode: false\r\n        };\r\n        this.canvas = React.createRef();\r\n        this.showVertexIds = true;\r\n        this.isPainting = false;\r\n        this.isDragging = false;\r\n        this.draggingOffset = {};\r\n        this.selectedVertex = null;\r\n        this.clickTimer = null;\r\n        // this.props.graphs = this.props.graphs;\r\n        this.vertexes = this.props.graphs.find(graph => graph.id === this.props.graphId).vertexes;\r\n        this.arcs = this.props.graphs.find(graph => graph.id === this.props.graphId).arcs;\r\n    }\r\n    prepareGraph(graph) {\r\n        if(!graph) throw new Error(`graph is : ${graph}`);\r\n\r\n        for (let vertex of graph.vertexes) {\r\n            vertex.arcs = [];\r\n            for (let arc of graph.arcs) {\r\n                if (arc.vertex1.id === vertex.id && arc.vertex2.id === vertex.id) {\r\n                    vertex.arcs.push(arc.id);\r\n                    vertex.arcs.push(arc.id);\r\n                } else if ((arc.vertex1.id === vertex.id || arc.vertex2.id === vertex.id)) {\r\n                    vertex.arcs.push(arc.id);\r\n                }\r\n            }\r\n        }\r\n        return graph;\r\n    }\r\n    updateGraphRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(this.props.graphs.find(graph => graph.id === this.props.graphId)),\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    adjacencyMatrixRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/adjacencyMatrix', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                alert(data.matrix.trim())\r\n            }).catch(err => console.log(err));\r\n    }\r\n    incidenceMatrixRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/incidenceMatrix', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                alert(data.matrix.trim())\r\n            }).catch(err => console.log(err));\r\n    }\r\n    eulerianCycleRequest(){\r\n        let startNode = this.vertexes.filter(v => v.selected)[0] || this.vertexes[0];\r\n        fetch(`${URL}/api/v1/graph/${this.props.graphId}/eulerianCycle?startNode=${startNode.id}`, {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> eulerianCycle request: ', data);\r\n                alert(data.path.map(vertex => vertex.id).join(','))\r\n            }).catch(err => console.log(err));\r\n    }\r\n    hamiltonianPathRequest(){\r\n        let startNode = this.vertexes.filter(v => v.selected)[0] || this.vertexes[0];\r\n        fetch(`${URL}/api/v1/graph/${this.props.graphId}/hamiltonianPath?startNode=${startNode.id}`, {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> hamiltonianPath request: ', data);\r\n                alert(data.path.map(vertex => vertex.id).join(','))\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findDiameterRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/diameter', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> diameter request: ', data);\r\n                alert(data.diameter)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findRadiusRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/radius', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> Radius request: ', data);\r\n                alert(data.radius)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findCenterRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/center', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> Center request: ', data);\r\n                alert(data.center.map(vertex => vertex.id).join(','))\r\n            }).catch(err => console.log(err));\r\n    }\r\n    planarCheckRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/planarCheck', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> planarCheck request: ', data);\r\n                data.isPlanar ? alert('Graph is planar') : alert('Graph is not planar');\r\n            }).catch(err => console.log(err));\r\n    }\r\n    planarReductionRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/planarReduction', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> planarReduction request: ', data);\r\n                this.props.setGraph(this.prepareGraph(data.planarGraph));\r\n                this.updateGraphRequest();\r\n            }).catch(err => console.log(err));\r\n    }\r\n    isTreeRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/isTree', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> isTree request: ', data);\r\n                data.isTree ? alert('Graph is tree') : alert('Graph is not tree');\r\n            }).catch(err => console.log(err));\r\n    }\r\n    treeReductionRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/tree', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> treeReduction request: ', data);\r\n                this.props.setGraph(this.prepareGraph(data.tree));\r\n                this.updateGraphRequest();\r\n            }).catch(err => console.log(err));\r\n    }\r\n    isFullRequest(){\r\n        fetch(URL2 + '/api/nodejs/checkFull/', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.props.graphs.find(g => g.id === this.props.graphId)),\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                data ? alert('Graph is full') : alert('Graph is not full');\r\n            }).catch(err => console.log(err));\r\n    }\r\n    makeFullRequest(){\r\n        fetch(URL2 + '/api/nodejs/makeFull/', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.props.graphs.find(g => g.id === this.props.graphId)),\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                this.props.setGraph(data);\r\n                this.updateGraphRequest();\r\n            }).catch(err => console.log(err));\r\n    }\r\n    cartesianRequest(){\r\n        let secondGraph = this.props.graphs\r\n            .find(g => g.name === prompt('Enter second graph name'));\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + ',' + secondGraph.id + '/cartesian', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> planarReduction request: ', data);\r\n                this.props.setGraph(this.prepareGraph(data.cartesian));\r\n                this.updateGraphRequest();\r\n            }).catch(err => console.log(err));\r\n    }\r\n    tensorRequest(){\r\n        // let secondGraph = this.props.graphs\r\n        //     .find(g => g.name === prompt('Enter second graph name'));\r\n        // fetch(URL + '/api/v1/graph/' + this.props.graphId + ',' + secondGraph + '/tensor', {\r\n        //     method: 'GET',\r\n        //     ...REQUEST_OPTIONS\r\n        // })\r\n        //     .then(response => response.json()).catch(err => console.log(err))\r\n        //     .then(data => {\r\n        //         console.log('Editor.js -> planarReduction request: ', data);\r\n        //         this.props.setGraph(this.prepareGraph(data.planarGraph));\r\n        //         this.updateGraphRequest();\r\n        //     }).catch(err => console.log(err));\r\n    }\r\n    findShortestPathRequest(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/shortestPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.path !== null)\r\n                        alert(data.path.map(vertex => vertex.id).join(','));\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n    }\r\n    findAllPathsRequest(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/allPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.paths !== null)\r\n                        alert(data.paths.map(path => path.map(vertex => vertex.id).join(',')).join('\\n'));\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n        // if(selectedVertexes.length === 2) {\r\n        //     alert(selectedVertexes[0].id, selectedVertexes[1].id);\r\n        // }\r\n    }\r\n    findAllShortestPathsRequest(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/allShortestPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.paths !== null)\r\n                        alert(data.paths.map(path => path.map(vertex => vertex.id).join(',')).join('\\n'));\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n    }\r\n    findDistance(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/shortestPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.path !== null)\r\n                        alert(data.path.map(vertex => vertex.id).length - 1);\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n    }\r\n\r\n    createNewVertex(x, y) {\r\n        this.vertexes.push({\r\n            x: x | 0, y: y | 0 , id: getId(this.vertexes.map(vertex => vertex.id)),\r\n            name: '', arcs: [], shape: VERTEX_SHAPE.STROKED\r\n        });\r\n    }\r\n\r\n    getArcsFromId(ids) {\r\n        if(!ids) throw new Error(`ids array is not array: ${ids}`);\r\n        return this.arcs.filter(arc => ids.some(id => id === arc.id));\r\n    }\r\n\r\n    deleteSelectedVertexes() { //deletes all selected vertexes\r\n        //two options of deleting vertexes:\r\n        //1) delete via filter\r\n        //2) delete via setting selected to null\r\n        //if 1 then we need to delete arcs manualy using checkArcs() in update()\r\n        //if 2 then vertexes and arcs will still be in arrays\r\n        //like [...,null,...] for vertexes\r\n        //and [...,{vertex1: null, vertex2: {..something} }, ...] for arcs\r\n        this.vertexes = this.vertexes.filter(vertex => !vertex.selected); //1) option\r\n        this.props.graphs.find(graph => graph.id === this.props.graphId).vertexes = this.vertexes;\r\n        this.props.graphs.find(graph => graph.id === this.props.graphId).arcs = this.arcs;\r\n        this.updateGraphRequest();\r\n        // vertexes = vertexes.map(vertex => {if(vertex.selected) vertex = null;return vertex;}); //2) option\r\n    }\r\n\r\n    createNewArc(vertex1, vertex2, isDirected = false) {\r\n        //создание новой дуги и вычисление углов между ее вершинами\r\n        // if(vertex1.arcs.filter(id1 => vertex2.arcs.some(id2 => id1 === id2)).length !== 0 &&\r\n        //     vertex1.id === vertex2.id) {\r\n        //     alert('exists');return;\r\n        // }\r\n\r\n        if(vertex1.arcs.filter(id1 => vertex2.arcs.some(id2 => id1 === id2)).length !== 0 &&\r\n            vertex1.id !== vertex2.id) {\r\n            alert('exists');return;\r\n        }\r\n        this.arcs.push({\r\n            vertex1, vertex2, isDirected, id: getId(this.arcs.map(arc => arc.id)),\r\n            angle12: {\r\n                sin: (vertex2.y - vertex1.y) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2),\r\n                cos: (vertex2.x - vertex1.x) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2)\r\n            },\r\n            angle21: {\r\n                sin: (vertex1.y - vertex2.y) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2),\r\n                cos: (vertex1.x - vertex2.x) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2)\r\n            }\r\n        });\r\n        //в обьекте вершины нужно иметь массив arcs который хранит все дуги с этой вершиной\r\n        vertex1.arcs.push(this.arcs[this.arcs.length - 1].id);\r\n        vertex2.arcs.push(this.arcs[this.arcs.length - 1].id);\r\n        this.updateGraphRequest();\r\n    }\r\n    handleSwapOrientation(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        if(selectedVertexes.length === 2) {\r\n            for(let arc of this.arcs){\r\n                if(!arc.isDirected) continue;\r\n                if(arc.vertex1 === selectedVertexes[0] && arc.vertex2 === selectedVertexes[1]) {\r\n                    arc.vertex1 = selectedVertexes[1];\r\n                    arc.vertex2 = selectedVertexes[0];\r\n                    this.updateAngles(arc);\r\n                } else if(arc.vertex1 === selectedVertexes[1] && arc.vertex2 === selectedVertexes[0]) {\r\n                    arc.vertex1 = selectedVertexes[0];\r\n                    arc.vertex2 = selectedVertexes[1];\r\n                    this.updateAngles(arc);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleDeleteArc(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        let selectedArcId;\r\n        if(selectedVertexes.length === 2){\r\n            selectedArcId = selectedVertexes[0].arcs.find(a1 => selectedVertexes[1].arcs.some(a2 => a2 === a1))\r\n        } else if(selectedVertexes.length === 1){\r\n            for(let arc of this.arcs){\r\n                if(arc.vertex1.id === selectedVertexes[0].id && arc.vertex2.id === selectedVertexes[0].id)\r\n                    selectedArcId = arc.id;\r\n            }\r\n        }\r\n        if(selectedArcId) this.arcs = this.arcs.filter(a => a.id !== selectedArcId);\r\n        for(let v of this.vertexes) {\r\n            v.arcs = v.arcs.filter(a => a !== selectedArcId);\r\n        }\r\n    }\r\n\r\n    updateAngles(arc) {\r\n        //функция обновления углов между вершинами, должна вызываться когда одна из вершин перемещается\r\n        arc.angle12 = {\r\n            sin: (arc.vertex2.y - arc.vertex1.y) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2),\r\n            cos: (arc.vertex2.x - arc.vertex1.x) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2)\r\n        };\r\n        arc.angle21 = {\r\n            sin: (arc.vertex1.y - arc.vertex2.y) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2),\r\n            cos: (arc.vertex1.x - arc.vertex2.x) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2)\r\n        };\r\n    }\r\n\r\n    handleMouseDown(event) {\r\n        if (this.state.paintMode) {\r\n            this.isPainting = true;\r\n            // this.paintingColor = this.state.colorInput;\r\n        } else {\r\n            this.selectedVertex = this.vertexes.find(vertex => Math.sqrt(((event.x) - vertex.x) ** 2 + ((event.y) - vertex.y) ** 2) <= (VERTEX_RADIUS));\r\n            if (this.selectedVertex) {\r\n                this.draggingOffset.X = event.x - this.selectedVertex.x;\r\n                this.draggingOffset.Y = event.y - this.selectedVertex.y;\r\n                this.isDragging = true;\r\n                this.clickTimer = true;\r\n                setTimeout(() => this.clickTimer = false, 300)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseMove(event) {\r\n        if (this.state.paintMode && this.isPainting) {\r\n            this.vertexes\r\n                .filter(vertex => Math.sqrt(((event.x) - vertex.x) ** 2 + ((event.y) - vertex.y) ** 2) <= (VERTEX_RADIUS + 37))\r\n                .forEach(vertex => vertex.color = this.state.paintingColor);\r\n            this.arcs\r\n                .filter(arc => Math.sqrt((event.x - (arc.vertex1.x + arc.vertex2.x) / 2) ** 2 + (event.y - (arc.vertex1.y + arc.vertex2.y) / 2) ** 2) <= 37)\r\n                .forEach(arc => arc.color = this.state.paintingColor);\r\n        } else if (this.isDragging === true) {\r\n            this.selectedVertex.x = event.x - this.draggingOffset.X;\r\n            this.selectedVertex.y = event.y - this.draggingOffset.Y;\r\n            this.getArcsFromId(this.selectedVertex.arcs)\r\n                .forEach(this.updateAngles);//обновление углов для всех дуг связанных с выбранной вершиной\r\n        }\r\n    }\r\n\r\n    handleMouseUp(event) {\r\n        if (this.state.paintMode && this.isPainting) {\r\n            this.isPainting = false;\r\n        } else if (this.isDragging === true) {\r\n            this.isDragging = false;\r\n            this.selectedVertex = this.clickTimer && this.vertexes.find(vertex => Math.sqrt(((event.x) - vertex.x) ** 2 + ((event.y) - vertex.y) ** 2) <= (VERTEX_RADIUS));\r\n            if (this.selectedVertex) {\r\n                this.selectedVertex.selected = !this.selectedVertex.selected;\r\n                this.selectedVertex.selected && (this.selectedVertex.timestamp = new Date().getTime());\r\n            }\r\n            // selectedVertex = null;\r\n            //непоянтно пока должна быть эта строчка или нет\r\n            //если будут баги с выделением вершин, скорее всего ее надо раскоментить\r\n            //пока подсчет степени выбранной веришны без этой строчки работает очень хорошо\r\n        } else {\r\n            this.vertexes.filter(vertex => vertex.selected).forEach(vertex => vertex.selected = false);\r\n        }\r\n        this.updateGraphRequest();\r\n    }\r\n\r\n    handleDoubleClick(event) {\r\n        //creates new vertex under cursor on double click\r\n        // this.createNewVertex(event.x, event.y);\r\n        this.createNewVertex(event.x, event.y);\r\n    }\r\n\r\n    handleDeleteVertex() {\r\n        this.deleteSelectedVertexes();\r\n        // this.checkArcs();\r\n    }\r\n\r\n    handleNewArc(isDirected) {\r\n        //creates an arc between two selected vertexes\r\n        //if seletected more or less than 2 nothing happens\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        if (selectedVertexes.length === 2) {\r\n            this.createNewArc(selectedVertexes[0], selectedVertexes[1], isDirected)\r\n        } else if (selectedVertexes.length === 1) {\r\n            this.createNewArc(selectedVertexes[0], selectedVertexes[0], isDirected)\r\n        }\r\n    }\r\n\r\n    handleVertexCount() {\r\n        alert(`Vertexes count: ${this.vertexes.length}`);\r\n    }\r\n\r\n    handleArcCount() {\r\n        alert(`Arcs count: ${this.arcs.length}`);\r\n    }\r\n\r\n    handleVertexPower() {\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        if (selectedVertexes.length !== 0) alert(`Selected vertexes power: ${selectedVertexes.reduce((power, vertex) => power + vertex.arcs.length, 0)}`);\r\n        else alert(`All vertexes power: ${this.vertexes.reduce((power, vertex) => power + this.getArcsFromId(vertex.arcs).length, 0)}`);\r\n    }\r\n\r\n    handleSwitchShape() {\r\n        this.vertexes\r\n            .filter(vertex => vertex.selected)\r\n            .forEach(vertex => vertex.shape === VERTEX_SHAPE.STROKED ?\r\n                (vertex.shape = VERTEX_SHAPE.FILLED) : (vertex.shape = VERTEX_SHAPE.STROKED));\r\n    }\r\n\r\n    handleChangeName() {\r\n        this.vertexes.find(vertex => vertex.selected).name = prompt('Enter name: ');\r\n    }\r\n\r\n    handlePaintMode() {\r\n        this.setState({paintMode: !this.state.paintMode});\r\n    }\r\n\r\n    handleColorChange(e) {\r\n        this.setState({\r\n            paintingColor: e.target.value\r\n        });\r\n    }\r\n\r\n    checkArcs() {\r\n        //deletes arcs that dont have one vertex\r\n        //because if you delete vertex, arc tied to it also must be deleted\r\n\r\n        // this.arcs = this.arcs.filter(arc => this.vertexes.indexOf(arc.vertex1) !== -1 && this.vertexes.indexOf(arc.vertex2) !== -1);\r\n        this.arcs = this.arcs.filter(arc => this.vertexes.find(v => arc.vertex1.id === v.id) && this.vertexes.find(v => arc.vertex2.id === v.id));\r\n        this.props.graphs.find(graph => graph.id === this.props.graphId).arcs = this.arcs;\r\n    }\r\n\r\n    drawVertexes() {\r\n        if (this.vertexes.length) for (let vertex of this.vertexes) { //checks if there is at least one vertex  and interate throuh them\r\n            this.ctx.beginPath();\r\n            this.ctx.lineWidth = 5;\r\n            vertex.selected ?\r\n                this.ctx.strokeStyle = this.ctx.fillStyle = 'red' : this.ctx.strokeStyle = this.ctx.fillStyle = vertex.color || 'white';\r\n            this.ctx.arc(vertex.x, vertex.y, VERTEX_RADIUS, 0, 2 * Math.PI);\r\n            this.ctx.stroke();\r\n            vertex.shape === VERTEX_SHAPE.FILLED && this.ctx.fill();\r\n            this.ctx.fillStyle = 'white';\r\n            this.ctx.font = \"12px Arial\";\r\n            this.showVertexIds && this.ctx.fillText(vertex.id, vertex.x + 1.5 * VERTEX_RADIUS, vertex.y + 1.5 * VERTEX_RADIUS);\r\n            this.ctx.font = vertex.name && \"14px Arial\";\r\n            vertex.name && this.ctx.fillText(vertex.name, vertex.x - 1.5 * VERTEX_RADIUS, vertex.y - 1.5 * VERTEX_RADIUS);\r\n        }\r\n    }\r\n\r\n    drawArcs() {\r\n        if (this.arcs.length) for (let arc of this.arcs) { //checks if there is at least one arc and interate throuh them\r\n            //-------КОСТЫЛЬ---------\r\n            arc.vertex1 = this.vertexes.find(v => v.id === arc.vertex1.id);\r\n            arc.vertex2 = this.vertexes.find(v => v.id === arc.vertex2.id);\r\n            //-----------------------\r\n            this.ctx.strokeStyle = arc.color || 'white';\r\n            this.ctx.fillStyle = arc.color || 'white';\r\n            this.ctx.lineWidth = 1;\r\n            let isLoop = false;\r\n\r\n            //это короче точки которые непосредственно будут концами дуги\r\n            let point1, point2;\r\n            this.ctx.beginPath();\r\n            if (arc.vertex1 === arc.vertex2) {\r\n                isLoop = true;\r\n                point1 = {\r\n                    x: arc.vertex1.x,\r\n                    y: arc.vertex1.y + VERTEX_RADIUS\r\n                };\r\n                point2 = {\r\n                    x: arc.vertex2.x,\r\n                    y: arc.vertex2.y + VERTEX_RADIUS\r\n                };\r\n                //checks if both vertexes exist and then draw arc\r\n                //а нафига мне проверять существуют ли вершины, я чето не помню\r\n                arc.vertex1 && arc.vertex2 && this.ctx.moveTo(point1.x, point1.y);\r\n                //здесь числа это типо размеры рисуемой петли\r\n                //можно было б вынести в константы, но мне чет влом\r\n                arc.vertex1 && arc.vertex2 && this.ctx.bezierCurveTo(point1.x + 25, point1.y + 50,\r\n                    point1.x - 25, point1.y + 50,\r\n                    point2.x, point2.y);\r\n            } else {\r\n                //с помощью углов находим точки на окружности вершины которые будут концами отрезка дуги\r\n                point1 = {\r\n                    x: arc.vertex1.x + VERTEX_RADIUS * arc.angle12.cos,\r\n                    y: arc.vertex1.y + VERTEX_RADIUS * arc.angle12.sin\r\n                };\r\n                point2 = {\r\n                    x: arc.vertex2.x + VERTEX_RADIUS * arc.angle21.cos,\r\n                    y: arc.vertex2.y + VERTEX_RADIUS * arc.angle21.sin\r\n                };\r\n\r\n                arc.vertex1 && arc.vertex2 && this.ctx.moveTo(point1.x, point1.y);\r\n                arc.vertex1 && arc.vertex2 && this.ctx.lineTo(point2.x, point2.y);\r\n            }\r\n            this.ctx.stroke();\r\n\r\n            if (arc.isDirected) {\r\n                let angle = Math.atan2(point2.y - point1.y, point2.x - point1.x);\r\n                // если петля, повернуть головку стрелки\r\n                // нужный угол поворота был выяснен оптыным путем\r\n                isLoop && (angle = -3.7 * Math.PI / 6);\r\n                let R = 10;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(point2.x, point2.y);\r\n                this.ctx.lineTo(point2.x - R * Math.cos(angle - Math.PI / 7),\r\n                    point2.y - R * Math.sin(angle - Math.PI / 7));\r\n                // путь от боковой точки стрелки к другой боковой точке\r\n                this.ctx.lineTo(point2.x - R * Math.cos(angle + Math.PI / 7),\r\n                    point2.y - R * Math.sin(angle + Math.PI / 7));\r\n                // путь от боковой точки до кончика стрелки, а затем\r\n                // снова в противоположную сторону\r\n                this.ctx.lineTo(point2.x, point2.y);\r\n                this.ctx.lineTo(point2.x - R * Math.cos(angle - Math.PI / 7),\r\n                    point2.y - R * Math.sin(angle - Math.PI / 7));\r\n                this.ctx.fill();\r\n            }\r\n            this.showVertexIds && this.ctx.fillText(arc.id, (arc.vertex1.x + arc.vertex2.x) / 2, (arc.vertex1.y + arc.vertex2.y) / 2);\r\n        }\r\n    }\r\n\r\n    update(canvasWidth, canvasHeight) {\r\n        this.checkArcs(); \t//comment if using 2) option of deleting\r\n        this.ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n        this.drawVertexes();\r\n        this.drawArcs();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas.current.onselectstart = () => false;\r\n        this.ctx = this.canvas.current.getContext('2d');\r\n        setInterval(() => this.update(this.canvas.current.width, this.canvas.current.height), 15);\r\n        setInterval(this.updateGraphReques, 500);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.vertexes = this.props.graphs.find(graph => graph.id === this.props.graphId).vertexes;\r\n        this.arcs = this.props.graphs.find(graph => graph.id === this.props.graphId).arcs;\r\n    }\r\n\r\n    getMouseEventWithOffset(event, canvas) {\r\n        let rect = canvas.getBoundingClientRect();\r\n        return ({\r\n            x: event.clientX - rect.left,\r\n            y: event.clientY - rect.top,\r\n            // ...event\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas\r\n                    id=\"canvas\"\r\n                    width=\"1200\" height=\"500\"\r\n                    style={\r\n                        this.state.paintMode ? {\r\n                                cursor: 'url(paint_cursor.png) 38 37, auto',\r\n                                border: '1px solid #d3d3d3'\r\n                            }\r\n                            : {cursor: 'auto', border: '1px solid #d3d3d3'}\r\n                    }\r\n                    ref={this.canvas}\r\n                    onMouseDown={e => this.handleMouseDown(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                    onMouseMove={e => this.handleMouseMove(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                    onMouseUp={e => this.handleMouseUp(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                    onDoubleClick={e => this.handleDoubleClick(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                >\r\n                </canvas>\r\n\r\n                <button onClick={() => this.handleNewArc(true)}>Oriented Arc</button>\r\n                <button onClick={() => this.handleNewArc(false)}>Nooreinted Arc</button>\r\n                <button onClick={this.handleSwapOrientation.bind(this)}>Swap orientation</button>\r\n                <button onClick={this.handleDeleteArc.bind(this)}>Delete arc</button>\r\n\r\n                <button onClick={this.handleChangeName.bind(this)}>Name</button>\r\n                <button onClick={this.handleSwitchShape.bind(this)}>Switch vertex shape</button>\r\n                <button onClick={this.handleDeleteVertex.bind(this)}>Delete vertex</button>\r\n                <button onClick={this.handlePaintMode.bind(this)}>Paint</button>\r\n                <input type=\"text\" placeholder=\"#000000\" onChange={this.handleColorChange.bind(this)}\r\n                       value={this.state.paintingColor}/>\r\n\r\n                <button onClick={() => this.showVertexIds = !this.showVertexIds}>Show vertexes ids</button>\r\n                <button onClick={this.handleVertexCount.bind(this)}>Vertexes count</button>\r\n                <button onClick={this.handleArcCount.bind(this)}>Arcs count</button>\r\n                <button onClick={this.handleVertexPower.bind(this)}>Vertex power</button>\r\n                {/*<button onClick={this.findShortestPathRequest.bind(this)}>Find shortest path</button>*/}\r\n                {/*<button onClick={this.findAllPathsRequest.bind(this)}>Find all paths</button>*/}\r\n                {/*<button onClick={this.findAllShortestPathsRequest.bind(this)}>Find all shortest paths</button>*/}\r\n                {/*<button onClick={this.findDistance.bind(this)}>Find distance</button>*/}\r\n                {/*<button onClick={this.adjacencyMatrixRequest.bind(this)}>Adjacency matrix</button>*/}\r\n                <button onClick={this.incidenceMatrixRequest.bind(this)}>Incidence matrix</button>\r\n                {/*<button onClick={this.eulerianCycleRequest.bind(this)}>Eulerian cycle</button>*/}\r\n                <button onClick={this.hamiltonianPathRequest.bind(this)}>Hamiltonian Path</button>\r\n                <button onClick={this.findDiameterRequest.bind(this)}>Find diameter</button>\r\n                <button onClick={this.findRadiusRequest.bind(this)}>Find radius</button>\r\n                <button onClick={this.findCenterRequest.bind(this)}>Find center</button>\r\n                <button onClick={this.planarCheckRequest.bind(this)}>Planar check</button>\r\n                <button onClick={this.planarReductionRequest.bind(this)}>Planar reduction</button>\r\n                {/*<button onClick={this.isTreeRequest.bind(this)}>Is tree</button>*/}\r\n                {/*<button onClick={this.treeReductionRequest.bind(this)}>Tree reduction</button>*/}\r\n                {/*<button onClick={this.isFullRequest.bind(this)}>Is full</button>*/}\r\n                {/*<button onClick={this.makeFullRequest.bind(this)}>Make full</button>*/}\r\n                <button onClick={this.cartesianRequest.bind(this)}>Cartesian</button>\r\n                <button onClick={this.tensorRequest.bind(this)}>Tensor</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Tabs from './Tabs'\r\nimport Editor from './Editor'\r\nimport {URL, REQUEST_OPTIONS} from './constants'\r\nimport {v4 as uuid} from 'uuid'\r\nimport axios from 'axios'\r\nimport copyObj from \"./copyObj\";\r\nimport './style.css'\r\n\r\nexport default class Root extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n        // this.graphs = [\r\n        //     {id: firstGraphId, name: 'graph_1', vertexes: [], arcs: []},\r\n        //     {id: 2, name: 'graph_2', vertexes: [], arcs: []},\r\n        //     {id: 3, name: 'graph_3', vertexes: [], arcs: []}\r\n        //     ];\r\n\t\tthis.isGraphListReady = false;\r\n\t\tthis.isComponentMounted = false;\r\n\t\tthis.getGraphList();\r\n\t\tthis.state = {\r\n\t\t\tgraphs: [],\r\n\t\t\tgraphId: null\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.isComponentMounted = true;\r\n\t\tif(this.isGraphListReady && this.graphList)\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraphs: this.graphList,\r\n\t\t\t\tgraphId: this.graphList[0].id\r\n\t\t\t})\r\n\t}\r\n\r\n\tgetGraphList() {\r\n\t\tfetch(URL + '/api/v1/graph/list', {\r\n\t\t\tmethod: 'GET',\r\n\t\t\t...REQUEST_OPTIONS\r\n\t\t})\r\n\t\t\t.then(response => response.json()).catch(err => console.log(err))\r\n\t\t\t.then(data => {\r\n\t\t\t\tlet preparedGraphList = this.prepareGraphList(data);\r\n\t\t\t\tif(this.isComponentMounted) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tgraphs: preparedGraphList,\r\n\t\t\t\t\t\tgraphId: preparedGraphList[0].id\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.isGraphListReady = true;\r\n\t\t\t\t\tthis.graphList = preparedGraphList;\r\n\t\t\t\t}\r\n\t\t\t}).catch(err => console.log(err));\r\n\t}\r\n\tprepareGraphList(graphList){\r\n\t\tlet preparedGraphList = graphList\r\n\t\t\t// .filter(graph => graph)\r\n\t\t\t.map(graph => this.prepareGraph(graph))\r\n\t\t\t.sort((g1, g2) => g2.timestamp - g1.timestamp);\r\n\t\tif(preparedGraphList === undefined) throw new Error('preparedGraphList is undefined');\r\n\t\treturn copyObj(preparedGraphList);\r\n\t}\r\n\tprepareGraph(graph){\r\n\t\tfor(let vertex of graph.vertexes){\r\n\t\t\tvertex.arcs = [];\r\n\t\t\tfor(let arc of graph.arcs){\r\n\t\t\t\tif(arc.vertex1.id === vertex.id && arc.vertex2.id === vertex.id) {\r\n\t\t\t\t\tvertex.arcs.push(arc.id);\r\n\t\t\t\t\tvertex.arcs.push(arc.id);\r\n\t\t\t\t} else if((arc.vertex1.id === vertex.id || arc.vertex2.id === vertex.id)) {\r\n\t\t\t\t\tvertex.arcs.push(arc.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn copyObj(graph);\r\n\t}\r\n\tonGraphCreated(newGraph){\r\n\t    newGraph.vertexes = [];\r\n\t    newGraph.arcs = [];\r\n\t    newGraph.timestamp = new Date().getTime();\r\n\r\n\t\tfetch(URL + '/api/v1/graph', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify(newGraph),\r\n\t\t\t...REQUEST_OPTIONS\r\n\t\t})\r\n\t\t\t.then(response => response.json()).catch(err => console.log(err))\r\n\t\t\t.then(data => {\r\n\t\t\t\tnewGraph.id = data.id;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tgraphs: [newGraph, ...this.state.graphs],\r\n\t\t\t\t\tgraphId: newGraph.id,\r\n\t\t\t\t});\r\n\t\t\t}).catch(err => console.log(err));\r\n    }\r\n\tsetGraph(graph) {\r\n\t\tthis.setState({\r\n\t\t\tgraphs: [graph, ...this.state.graphs.filter(g => g.id !== graph.id)]\r\n\t\t});\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<Tabs\r\n                    onTabChange={graphId => this.setState({graphId})}\r\n                    onGraphCreated={newGraph => this.onGraphCreated(newGraph)}\r\n                    graphs={this.state.graphs}\r\n\t\t\t\t\tgraphId = {this.state.graphId}\r\n                />\r\n\t\t\t\t{this.state.graphs.length !== 0 &&\r\n\t\t\t\t\t<Editor\r\n\t\t\t\t\t\tgraphId={this.state.graphId}\r\n\t\t\t\t\t\tgraphs={this.state.graphs}\r\n\t\t\t\t\t\tsetGraph={graph => this.setGraph(graph)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\n\n\nReactDOM.render(\n\t<Root/>,\n \tdocument.getElementById('root')\n);"],"sourceRoot":""}