{"version":3,"sources":["Tabs.js","getId.js","constants.js","Editor.js","copyObj.js","Root.js","index.js"],"names":["Tabs","props","newGraph","name","prompt","this","onGraphCreated","graph","setState","selectedGraphId","id","onTabChange","graphs","map","key","onSelect","handleGraphSelected","bind","isSelected","graphId","onClick","handleCreateNewGraph","React","Component","Tab","className","handleTabSelected","getId","allIds","Date","getTime","includes","URL","REQUEST_OPTIONS","mode","headers","VERTEX_SHAPE","Object","freeze","STROKED","FILLED","Editor","state","isDirected","paintingColor","paintMode","canvas","createRef","showVertexIds","isPainting","isDragging","draggingOffset","selectedVertex","clickTimer","vertexes","find","arcs","fetch","method","body","JSON","stringify","catch","err","console","log","then","response","json","data","alert","matrix","trim","startNode","filter","v","selected","text","isPlanar","isTree","selectedVertexes","vertex","sort","v1","v2","timestamp","length","path","join","paths","x","y","push","shape","ids","arc","some","updateGraphRequest","vertex1","vertex2","id1","id2","angle12","sin","Math","sqrt","cos","angle21","updateAngles","selectedArcId","a1","a2","a","event","X","Y","setTimeout","VERTEX_RADIUS","forEach","color","getArcsFromId","createNewVertex","deleteSelectedVertexes","createNewArc","reduce","power","e","target","value","ctx","beginPath","lineWidth","strokeStyle","fillStyle","PI","stroke","fill","font","fillText","isLoop","point1","point2","moveTo","bezierCurveTo","lineTo","angle","atan2","R","canvasWidth","canvasHeight","checkArcs","clearRect","drawVertexes","drawArcs","current","onselectstart","getContext","setInterval","update","width","height","updateGraphReques","rect","getBoundingClientRect","clientX","left","clientY","top","style","cursor","border","ref","onMouseDown","handleMouseDown","getMouseEventWithOffset","onMouseMove","handleMouseMove","onMouseUp","handleMouseUp","onDoubleClick","handleDoubleClick","handleNewArc","handleSwapOrientation","handleDeleteArc","handleChangeName","handleSwitchShape","handleDeleteVertex","handlePaintMode","type","placeholder","onChange","handleColorChange","handleVertexCount","handleArcCount","handleVertexPower","findShortestPathRequest","findAllShortestPathsRequest","findDistance","adjacencyMatrixRequest","incidenceMatrixRequest","eulerianCycleRequest","hamiltonianPathRequest","findDiameterRequest","findRadiusRequest","findCenterRequest","planarCheckRequest","isTreeRequest","copyObj","obj","undefined","Error","parse","Root","isGraphListReady","isComponentMounted","getGraphList","graphList","preparedGraphList","prepareGraphList","prepareGraph","g1","g2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5417e08.chunk.js","sourcesContent":["import React from 'react'\r\nimport {v4 as uuid} from 'uuid'\r\n\r\nexport default class Tabs extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\t// this.state = {\r\n\t\t// \tgraphs: this.props.graphs,\r\n\t\t// \tselectedGraphId: this.props.graphId\r\n\t\t// };\r\n\t}\r\n\thandleCreateNewGraph() {\r\n\t    let newGraph = {name: prompt('Enter name of graph')};\r\n\t    this.props.onGraphCreated(newGraph);\r\n\t\t// this.setState({\r\n\t\t// \tgraphs: [...this.state.graphs, newGraph]\r\n\t\t// });\r\n\t}\r\n\thandleGraphSelected(graph) {\r\n\t\tthis.setState({selectedGraphId: graph.id});\r\n\t\tthis.props.onTabChange(graph.id);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{this.props.graphs.map(graph =>\r\n\t\t\t\t\t<Tab key={graph.id}\r\n\t\t\t\t\t\t graph={graph} \r\n\t\t\t\t\t\t onSelect={this.handleGraphSelected.bind(this)}\r\n\t\t\t\t\t\t isSelected={this.props.graphId === graph.id}/>\r\n\t\t\t\t)}\r\n\t\t\t\t<button onClick={this.handleCreateNewGraph.bind(this)}>+</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Tab extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t}\r\n\thandleTabSelected(){\r\n\t\tthis.props.onSelect(this.props.graph);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<button className=\"tab-button\" onClick={this.handleTabSelected.bind(this)}>\r\n\t\t\t\t{this.props.isSelected ? <b>{this.props.graph.name}</b> : this.props.graph.name}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n} ","const getId = (allIds) => {\r\n    let id = new Date().getTime() & 0x000000ffff;\r\n    while(allIds.includes(id))\r\n        id = new Date().getTime() & 0x000000ffff;\r\n    return id;\r\n};\r\n\r\nexport default getId;","export const URL = 'http://127.0.0.1:8000';\r\nexport const REQUEST_OPTIONS = {\r\n    mode: 'cors',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    // cache: 'no-cache', credentials: 'same-origin',\r\n    // redirect: 'follow',\r\n    // referrerPolicy: 'no-referrer'\r\n};\r\n\r\nexport const VERTEX_SHAPE = Object.freeze({STROKED: 'STROKED', FILLED: 'FILLED'});\r\nexport const VERTEX_RADIUS = 10;","import React from 'react'\r\n// import {v4 as uuid} from 'uuid'\r\nimport getId from \"./getId\"\r\nimport {VERTEX_SHAPE, VERTEX_RADIUS, URL, REQUEST_OPTIONS} from './constants'\r\n\r\nexport default class Editor extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isDirected: false,\r\n            paintingColor: '',\r\n            paintMode: false\r\n        };\r\n        this.canvas = React.createRef();\r\n        this.showVertexIds = true;\r\n        this.isPainting = false;\r\n        this.isDragging = false;\r\n        this.draggingOffset = {};\r\n        this.selectedVertex = null;\r\n        this.clickTimer = null;\r\n        // this.props.graphs = this.props.graphs;\r\n        this.vertexes = this.props.graphs.find(graph => graph.id === this.props.graphId).vertexes;\r\n        this.arcs = this.props.graphs.find(graph => graph.id === this.props.graphId).arcs;\r\n    }\r\n\r\n    updateGraphRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(this.props.graphs.find(graph => graph.id === this.props.graphId)),\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    adjacencyMatrixRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/adjacencyMatrix', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                alert(data.matrix.trim())\r\n            }).catch(err => console.log(err));\r\n    }\r\n    incidenceMatrixRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/incidenceMatrix', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                alert(data.matrix.trim())\r\n            }).catch(err => console.log(err));\r\n    }\r\n    eulerianCycleRequest(){\r\n        let startNode = this.vertexes.filter(v => v.selected)[0] || this.vertexes[0];\r\n        fetch(`${URL}/api/v1/graph/${this.props.graphId}/eulerianCycle?startNode=${startNode.id}`, {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.text()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> eulerianCycle request: ', data);\r\n                alert(data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    hamiltonianPathRequest(){\r\n        let startNode = this.vertexes.filter(v => v.selected)[0] || this.vertexes[0];\r\n        fetch(`${URL}/api/v1/graph/${this.props.graphId}/hamiltonianPath?startNode=${startNode.id}`, {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.text()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> hamiltonianPath request: ', data);\r\n                alert(data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findDiameterRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/diameter', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> diameter request: ', data);\r\n                alert(data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findRadiusRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/radius', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> Radius request: ', data);\r\n                alert(data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findCenterRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/center', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> Center request: ', data);\r\n                alert(data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n    planarCheckRequest(){\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/planarCheck', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> planarCheck request: ', data);\r\n                data.isPlanar ? alert('Graph is planar') : alert('Graph is not planar');\r\n            }).catch(err => console.log(err));\r\n    }\r\n    isTreeRequest(){\r\n        console.log('Editor.js -> isTreeRequest/125 this.props.graphs[0]: ', JSON.stringify(this.props.graphs[0]));\r\n        fetch(URL + '/api/v1/graph/' + this.props.graphId + '/isTree', {\r\n            method: 'GET',\r\n            ...REQUEST_OPTIONS\r\n        })\r\n            .then(response => response.json()).catch(err => console.log(err))\r\n            .then(data => {\r\n                console.log('Editor.js -> isTree request: ', data);\r\n                data.isTree ? alert('Graph is tree') : alert('Graph is not tree');\r\n            }).catch(err => console.log(err));\r\n    }\r\n    findShortestPathRequest(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/shortestPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.path !== null)\r\n                        alert(data.path.map(vertex => vertex.id).join(','));\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n    }\r\n    findAllShortestPathsRequest(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/allShortestPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.path !== null)\r\n                        alert(data.paths.map(path => path.map(vertex => vertex.id).join(',')).join('\\n'));\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n    }\r\n    findDistance(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected).sort((v1, v2) => v2.timestamp - v1.timestamp);\r\n        if(selectedVertexes.length === 2) {\r\n            fetch(`${URL}/api/v1/graph/${this.props.graphId}/shortestPath?fromNode=${selectedVertexes[0].id}&toNode=${selectedVertexes[1].id}` , {\r\n                method: 'GET',\r\n                ...REQUEST_OPTIONS\r\n            })\r\n                .then(response => response.json()).catch(err => console.log(err))\r\n                .then(data => {\r\n                    if(data.path !== null)\r\n                        alert(data.path.map(vertex => vertex.id).length - 1);\r\n                    else alert('no path');\r\n                }).catch(err => console.log(err));\r\n        }\r\n    }\r\n\r\n    createNewVertex(x, y) {\r\n        this.vertexes.push({\r\n            x, y, id: getId(this.vertexes.map(vertex => vertex.id)),\r\n            name: '', arcs: [], shape: VERTEX_SHAPE.STROKED\r\n        });\r\n    }\r\n\r\n    getArcsFromId(ids) {\r\n        return this.arcs.filter(arc => ids.some(id => id === arc.id));\r\n    }\r\n\r\n    deleteSelectedVertexes() { //deletes all selected vertexes\r\n        //two options of deleting vertexes:\r\n        //1) delete via filter\r\n        //2) delete via setting selected to null\r\n        //if 1 then we need to delete arcs manualy using checkArcs() in update()\r\n        //if 2 then vertexes and arcs will still be in arrays\r\n        //like [...,null,...] for vertexes\r\n        //and [...,{vertex1: null, vertex2: {..something} }, ...] for arcs\r\n        this.vertexes = this.vertexes.filter(vertex => !vertex.selected); //1) option\r\n        this.props.graphs.find(graph => graph.id === this.props.graphId).vertexes = this.vertexes;\r\n        this.props.graphs.find(graph => graph.id === this.props.graphId).arcs = this.arcs;\r\n        this.updateGraphRequest();\r\n        // vertexes = vertexes.map(vertex => {if(vertex.selected) vertex = null;return vertex;}); //2) option\r\n    }\r\n\r\n    createNewArc(vertex1, vertex2, isDirected = false) {\r\n        //создание новой дуги и вычисление углов между ее вершинами\r\n        if(vertex1.arcs.filter(id1 => vertex2.arcs.some(id2 => id1 === id2)).length !== 0) {alert('exists');return;}\r\n        this.arcs.push({\r\n            vertex1, vertex2, isDirected, id: getId(this.arcs.map(arc => arc.id)),\r\n            angle12: {\r\n                sin: (vertex2.y - vertex1.y) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2),\r\n                cos: (vertex2.x - vertex1.x) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2)\r\n            },\r\n            angle21: {\r\n                sin: (vertex1.y - vertex2.y) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2),\r\n                cos: (vertex1.x - vertex2.x) / Math.sqrt((vertex2.x - vertex1.x) ** 2 + (vertex2.y - vertex1.y) ** 2)\r\n            }\r\n        });\r\n        //в обьекте вершины нужно иметь массив arcs который хранит все дуги с этой вершиной\r\n        vertex1.arcs.push(this.arcs[this.arcs.length - 1].id);\r\n        vertex2.arcs.push(this.arcs[this.arcs.length - 1].id);\r\n        this.updateGraphRequest();\r\n    }\r\n    handleSwapOrientation(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        if(selectedVertexes.length === 2) {\r\n            for(let arc of this.arcs){\r\n                if(!arc.isDirected) continue;\r\n                if(arc.vertex1 === selectedVertexes[0] && arc.vertex2 === selectedVertexes[1]) {\r\n                    arc.vertex1 = selectedVertexes[1];\r\n                    arc.vertex2 = selectedVertexes[0];\r\n                    this.updateAngles(arc);\r\n                } else if(arc.vertex1 === selectedVertexes[1] && arc.vertex2 === selectedVertexes[0]) {\r\n                    arc.vertex1 = selectedVertexes[0];\r\n                    arc.vertex2 = selectedVertexes[1];\r\n                    this.updateAngles(arc);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleDeleteArc(){\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        let selectedArcId;\r\n        if(selectedVertexes.length === 2){\r\n            selectedArcId = selectedVertexes[0].arcs.find(a1 => selectedVertexes[1].arcs.some(a2 => a2 === a1))\r\n        } else if(selectedVertexes.length === 1){\r\n            for(let arc of this.arcs){\r\n                if(arc.vertex1.id === selectedVertexes[0].id && arc.vertex2.id === selectedVertexes[0].id)\r\n                    selectedArcId = arc.id;\r\n            }\r\n        }\r\n        if(selectedArcId) this.arcs = this.arcs.filter(a => a.id !== selectedArcId);\r\n    }\r\n\r\n    updateAngles(arc) {\r\n        //функция обновления углов между вершинами, должна вызываться когда одна из вершин перемещается\r\n        arc.angle12 = {\r\n            sin: (arc.vertex2.y - arc.vertex1.y) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2),\r\n            cos: (arc.vertex2.x - arc.vertex1.x) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2)\r\n        };\r\n        arc.angle21 = {\r\n            sin: (arc.vertex1.y - arc.vertex2.y) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2),\r\n            cos: (arc.vertex1.x - arc.vertex2.x) / Math.sqrt((arc.vertex2.x - arc.vertex1.x) ** 2 + (arc.vertex2.y - arc.vertex1.y) ** 2)\r\n        };\r\n    }\r\n\r\n    handleMouseDown(event) {\r\n        if (this.state.paintMode) {\r\n            this.isPainting = true;\r\n            // this.paintingColor = this.state.colorInput;\r\n        } else {\r\n            this.selectedVertex = this.vertexes.find(vertex => Math.sqrt(((event.x) - vertex.x) ** 2 + ((event.y) - vertex.y) ** 2) <= (VERTEX_RADIUS));\r\n            if (this.selectedVertex) {\r\n                this.draggingOffset.X = event.x - this.selectedVertex.x;\r\n                this.draggingOffset.Y = event.y - this.selectedVertex.y;\r\n                this.isDragging = true;\r\n                this.clickTimer = true;\r\n                setTimeout(() => this.clickTimer = false, 300)\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseMove(event) {\r\n        if (this.state.paintMode && this.isPainting) {\r\n            this.vertexes\r\n                .filter(vertex => Math.sqrt(((event.x) - vertex.x) ** 2 + ((event.y) - vertex.y) ** 2) <= (VERTEX_RADIUS + 37))\r\n                .forEach(vertex => vertex.color = this.state.paintingColor);\r\n            this.arcs\r\n                .filter(arc => Math.sqrt((event.x - (arc.vertex1.x + arc.vertex2.x) / 2) ** 2 + (event.y - (arc.vertex1.y + arc.vertex2.y) / 2) ** 2) <= 37)\r\n                .forEach(arc => arc.color = this.state.paintingColor);\r\n        } else if (this.isDragging === true) {\r\n            this.selectedVertex.x = event.x - this.draggingOffset.X;\r\n            this.selectedVertex.y = event.y - this.draggingOffset.Y;\r\n            this.getArcsFromId(this.selectedVertex.arcs)\r\n                .forEach(this.updateAngles);//обновление углов для всех дуг связанных с выбранной вершиной\r\n        }\r\n    }\r\n\r\n    handleMouseUp(event) {\r\n        if (this.state.paintMode && this.isPainting) {\r\n            this.isPainting = false;\r\n        } else if (this.isDragging === true) {\r\n            this.isDragging = false;\r\n            this.selectedVertex = this.clickTimer && this.vertexes.find(vertex => Math.sqrt(((event.x) - vertex.x) ** 2 + ((event.y) - vertex.y) ** 2) <= (VERTEX_RADIUS));\r\n            if (this.selectedVertex) {\r\n                this.selectedVertex.selected = !this.selectedVertex.selected;\r\n                this.selectedVertex.selected && (this.selectedVertex.timestamp = new Date().getTime());\r\n            }\r\n            // selectedVertex = null;\r\n            //непоянтно пока должна быть эта строчка или нет\r\n            //если будут баги с выделением вершин, скорее всего ее надо раскоментить\r\n            //пока подсчет степени выбранной веришны без этой строчки работает очень хорошо\r\n        } else {\r\n            this.vertexes.filter(vertex => vertex.selected).forEach(vertex => vertex.selected = false);\r\n        }\r\n        this.updateGraphRequest();\r\n    }\r\n\r\n    handleDoubleClick(event) {\r\n        //creates new vertex under cursor on double click\r\n        // this.createNewVertex(event.x, event.y);\r\n        this.createNewVertex(event.x, event.y);\r\n    }\r\n\r\n    handleDeleteVertex() {\r\n        this.deleteSelectedVertexes();\r\n        // this.checkArcs();\r\n    }\r\n\r\n    handleNewArc(isDirected) {\r\n        //creates an arc between two selected vertexes\r\n        //if seletected more or less than 2 nothing happens\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        if (selectedVertexes.length === 2) {\r\n            this.createNewArc(selectedVertexes[0], selectedVertexes[1], isDirected)\r\n        } else if (selectedVertexes.length === 1) {\r\n            this.createNewArc(selectedVertexes[0], selectedVertexes[0], isDirected)\r\n        }\r\n    }\r\n\r\n    handleVertexCount() {\r\n        alert(`Vertexes count: ${this.vertexes.length}`);\r\n    }\r\n\r\n    handleArcCount() {\r\n        alert(`Arcs count: ${this.arcs.length}`);\r\n    }\r\n\r\n    handleVertexPower() {\r\n        let selectedVertexes = this.vertexes.filter(vertex => vertex.selected);\r\n        if (selectedVertexes.length !== 0) alert(`Selected vertexes power: ${selectedVertexes.reduce((power, vertex) => power + vertex.arcs.length, 0)}`);\r\n        else alert(`All vertexes power: ${this.vertexes.reduce((power, vertex) => power + this.getArcsFromId(vertex.arcs).length, 0)}`);\r\n    }\r\n\r\n    handleSwitchShape() {\r\n        this.vertexes\r\n            .filter(vertex => vertex.selected)\r\n            .forEach(vertex => vertex.shape === VERTEX_SHAPE.STROKED ?\r\n                (vertex.shape = VERTEX_SHAPE.FILLED) : (vertex.shape = VERTEX_SHAPE.STROKED));\r\n    }\r\n\r\n    handleChangeName() {\r\n        this.vertexes.find(vertex => vertex.selected).name = prompt('Enter name: ');\r\n    }\r\n\r\n    handlePaintMode() {\r\n        this.setState({paintMode: !this.state.paintMode});\r\n    }\r\n\r\n    handleColorChange(e) {\r\n        this.setState({\r\n            paintingColor: e.target.value\r\n        });\r\n    }\r\n\r\n    checkArcs() {\r\n        //deletes arcs that dont have one vertex\r\n        //because if you delete vertex, arc tied to it also must be deleted\r\n\r\n        // this.arcs = this.arcs.filter(arc => this.vertexes.indexOf(arc.vertex1) !== -1 && this.vertexes.indexOf(arc.vertex2) !== -1);\r\n        this.arcs = this.arcs.filter(arc => this.vertexes.find(v => arc.vertex1.id === v.id) && this.vertexes.find(v => arc.vertex2.id === v.id));\r\n        this.props.graphs.find(graph => graph.id === this.props.graphId).arcs = this.arcs;\r\n    }\r\n\r\n    drawVertexes() {\r\n        if (this.vertexes.length) for (let vertex of this.vertexes) { //checks if there is at least one vertex  and interate throuh them\r\n            this.ctx.beginPath();\r\n            this.ctx.lineWidth = 5;\r\n            vertex.selected ?\r\n                this.ctx.strokeStyle = this.ctx.fillStyle = 'orange' : this.ctx.strokeStyle = this.ctx.fillStyle = vertex.color || 'black';\r\n            this.ctx.arc(vertex.x, vertex.y, VERTEX_RADIUS, 0, 2 * Math.PI);\r\n            this.ctx.stroke();\r\n            vertex.shape === VERTEX_SHAPE.FILLED && this.ctx.fill();\r\n            this.ctx.fillStyle = 'black';\r\n            this.ctx.font = \"12px Arial\";\r\n            this.showVertexIds && this.ctx.fillText(vertex.id, vertex.x + 1.5 * VERTEX_RADIUS, vertex.y + 1.5 * VERTEX_RADIUS);\r\n            this.ctx.font = vertex.name && \"14px Arial\";\r\n            vertex.name && this.ctx.fillText(vertex.name, vertex.x - 1.5 * VERTEX_RADIUS, vertex.y - 1.5 * VERTEX_RADIUS);\r\n        }\r\n    }\r\n\r\n    drawArcs() {\r\n        if (this.arcs.length) for (let arc of this.arcs) { //checks if there is at least one arc and interate throuh them\r\n            //-------КОСТЫЛЬ---------\r\n            arc.vertex1 = this.vertexes.find(v => v.id === arc.vertex1.id);\r\n            arc.vertex2 = this.vertexes.find(v => v.id === arc.vertex2.id);\r\n            //-----------------------\r\n            this.ctx.strokeStyle = arc.color || 'black';\r\n            this.ctx.fillStyle = arc.color || 'black';\r\n            this.ctx.lineWidth = 1;\r\n            let isLoop = false;\r\n\r\n            //это короче точки которые непосредственно будут концами дуги\r\n            let point1, point2;\r\n            this.ctx.beginPath();\r\n            if (arc.vertex1 === arc.vertex2) {\r\n                isLoop = true;\r\n                point1 = {\r\n                    x: arc.vertex1.x,\r\n                    y: arc.vertex1.y + VERTEX_RADIUS\r\n                };\r\n                point2 = {\r\n                    x: arc.vertex2.x,\r\n                    y: arc.vertex2.y + VERTEX_RADIUS\r\n                };\r\n                //checks if both vertexes exist and then draw arc\r\n                //а нафига мне проверять существуют ли вершины, я чето не помню\r\n                arc.vertex1 && arc.vertex2 && this.ctx.moveTo(point1.x, point1.y);\r\n                //здесь числа это типо размеры рисуемой петли\r\n                //можно было б вынести в константы, но мне чет влом\r\n                arc.vertex1 && arc.vertex2 && this.ctx.bezierCurveTo(point1.x + 25, point1.y + 50,\r\n                    point1.x - 25, point1.y + 50,\r\n                    point2.x, point2.y);\r\n            } else {\r\n                //с помощью углов находим точки на окружности вершины которые будут концами отрезка дуги\r\n                point1 = {\r\n                    x: arc.vertex1.x + VERTEX_RADIUS * arc.angle12.cos,\r\n                    y: arc.vertex1.y + VERTEX_RADIUS * arc.angle12.sin\r\n                };\r\n                point2 = {\r\n                    x: arc.vertex2.x + VERTEX_RADIUS * arc.angle21.cos,\r\n                    y: arc.vertex2.y + VERTEX_RADIUS * arc.angle21.sin\r\n                };\r\n\r\n                arc.vertex1 && arc.vertex2 && this.ctx.moveTo(point1.x, point1.y);\r\n                arc.vertex1 && arc.vertex2 && this.ctx.lineTo(point2.x, point2.y);\r\n            }\r\n            this.ctx.stroke();\r\n\r\n            if (arc.isDirected) {\r\n                let angle = Math.atan2(point2.y - point1.y, point2.x - point1.x);\r\n                // если петля, повернуть головку стрелки\r\n                // нужный угол поворота был выяснен оптыным путем\r\n                isLoop && (angle = -3.7 * Math.PI / 6);\r\n                let R = 10;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(point2.x, point2.y);\r\n                this.ctx.lineTo(point2.x - R * Math.cos(angle - Math.PI / 7),\r\n                    point2.y - R * Math.sin(angle - Math.PI / 7));\r\n                // путь от боковой точки стрелки к другой боковой точке\r\n                this.ctx.lineTo(point2.x - R * Math.cos(angle + Math.PI / 7),\r\n                    point2.y - R * Math.sin(angle + Math.PI / 7));\r\n                // путь от боковой точки до кончика стрелки, а затем\r\n                // снова в противоположную сторону\r\n                this.ctx.lineTo(point2.x, point2.y);\r\n                this.ctx.lineTo(point2.x - R * Math.cos(angle - Math.PI / 7),\r\n                    point2.y - R * Math.sin(angle - Math.PI / 7));\r\n                this.ctx.fill();\r\n            }\r\n            this.showVertexIds && this.ctx.fillText(arc.id, (arc.vertex1.x + arc.vertex2.x) / 2, (arc.vertex1.y + arc.vertex2.y) / 2);\r\n        }\r\n    }\r\n\r\n    update(canvasWidth, canvasHeight) {\r\n        this.checkArcs(); \t//comment if using 2) option of deleting\r\n        this.ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n        this.drawVertexes();\r\n        this.drawArcs();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas.current.onselectstart = () => false;\r\n        this.ctx = this.canvas.current.getContext('2d');\r\n        setInterval(() => this.update(this.canvas.current.width, this.canvas.current.height), 15);\r\n        setInterval(this.updateGraphReques, 500);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.vertexes = this.props.graphs.find(graph => graph.id === this.props.graphId).vertexes;\r\n        this.arcs = this.props.graphs.find(graph => graph.id === this.props.graphId).arcs;\r\n    }\r\n\r\n    getMouseEventWithOffset(event, canvas) {\r\n        let rect = canvas.getBoundingClientRect();\r\n        return ({\r\n            x: event.clientX - rect.left,\r\n            y: event.clientY - rect.top,\r\n            // ...event\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas\r\n                    id=\"canvas\"\r\n                    width=\"1200\" height=\"500\"\r\n                    style={\r\n                        this.state.paintMode ? {\r\n                                cursor: 'url(paint_cursor.png) 38 37, auto',\r\n                                border: '1px solid #d3d3d3'\r\n                            }\r\n                            : {cursor: 'auto', border: '1px solid #d3d3d3'}\r\n                    }\r\n                    ref={this.canvas}\r\n                    onMouseDown={e => this.handleMouseDown(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                    onMouseMove={e => this.handleMouseMove(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                    onMouseUp={e => this.handleMouseUp(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                    onDoubleClick={e => this.handleDoubleClick(this.getMouseEventWithOffset(e, this.canvas.current))}\r\n                >\r\n                </canvas>\r\n\r\n                <button onClick={() => this.handleNewArc(true)}>Oriented Arc</button>\r\n                <button onClick={() => this.handleNewArc(false)}>Nooreinted Arc</button>\r\n                <button onClick={this.handleSwapOrientation.bind(this)}>Swap orientation</button>\r\n                <button onClick={this.handleDeleteArc.bind(this)}>Delete arc</button>\r\n\r\n                <button onClick={this.handleChangeName.bind(this)}>Name</button>\r\n                <button onClick={this.handleSwitchShape.bind(this)}>Switch vertex shape</button>\r\n                <button onClick={this.handleDeleteVertex.bind(this)}>Delete vertex</button>\r\n                <button onClick={this.handlePaintMode.bind(this)}>Paint</button>\r\n                <input type=\"text\" placeholder=\"#000000\" onChange={this.handleColorChange.bind(this)}\r\n                       value={this.state.paintingColor}/>\r\n                <button onClick={() => this.showVertexIds = !this.showVertexIds}>Show vertexes ids</button>\r\n                <button onClick={this.handleVertexCount.bind(this)}>Vertexes count</button>\r\n                <button onClick={this.handleArcCount.bind(this)}>Arcs count</button>\r\n                <button onClick={this.handleVertexPower.bind(this)}>Vertex power</button>\r\n                <button onClick={this.findShortestPathRequest.bind(this)}>Find shortest path</button>\r\n                <button onClick={this.findAllShortestPathsRequest.bind(this)}>Find all shortest paths</button>\r\n                <button onClick={this.findDistance.bind(this)}>Find distance</button>\r\n                <button onClick={this.adjacencyMatrixRequest.bind(this)}>Adjacency matrix</button>\r\n                <button onClick={this.incidenceMatrixRequest.bind(this)}>Incidence matrix</button>\r\n                <button onClick={this.eulerianCycleRequest.bind(this)}>Eulerian cycle</button>\r\n                <button onClick={this.hamiltonianPathRequest.bind(this)}>Hamiltonian Path</button>\r\n                <button onClick={this.findDiameterRequest.bind(this)}>Find diameter</button>\r\n                <button onClick={this.findRadiusRequest.bind(this)}>Find radius</button>\r\n                <button onClick={this.findCenterRequest.bind(this)}>Find center</button>\r\n                <button onClick={this.planarCheckRequest.bind(this)}>Planar check</button>\r\n                <button onClick={this.isTreeRequest.bind(this)}>Is tree</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","const copyObj = obj => {\r\n    if(obj === undefined) throw new Error('Object is undefined');\r\n    return JSON.parse(JSON.stringify(obj));\r\n};\r\n\r\nexport default copyObj;","import React from 'react'\r\nimport Tabs from './Tabs'\r\nimport Editor from './Editor'\r\nimport {URL, REQUEST_OPTIONS} from './constants'\r\nimport {v4 as uuid} from 'uuid'\r\nimport axios from 'axios'\r\nimport copyObj from \"./copyObj\";\r\n\r\nexport default class Root extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n        // this.graphs = [\r\n        //     {id: firstGraphId, name: 'graph_1', vertexes: [], arcs: []},\r\n        //     {id: 2, name: 'graph_2', vertexes: [], arcs: []},\r\n        //     {id: 3, name: 'graph_3', vertexes: [], arcs: []}\r\n        //     ];\r\n\t\tthis.isGraphListReady = false;\r\n\t\tthis.isComponentMounted = false;\r\n\t\tthis.getGraphList();\r\n\t\tthis.state = {\r\n\t\t\tgraphs: [],\r\n\t\t\tgraphId: null\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.isComponentMounted = true;\r\n\t\tif(this.isGraphListReady && this.graphList)\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraphs: this.graphList,\r\n\t\t\t\tgraphId: this.graphList[0].id\r\n\t\t\t})\r\n\t}\r\n\r\n\tgetGraphList() {\r\n\t\tfetch(URL + '/api/v1/graph/list', {\r\n\t\t\tmethod: 'GET',\r\n\t\t\t...REQUEST_OPTIONS\r\n\t\t})\r\n\t\t\t.then(response => response.json()).catch(err => console.log(err))\r\n\t\t\t.then(data => {\r\n\t\t\t\tlet preparedGraphList = this.prepareGraphList(data);\r\n\t\t\t\tif(this.isComponentMounted) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tgraphs: preparedGraphList,\r\n\t\t\t\t\t\tgraphId: preparedGraphList[0].id\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.isGraphListReady = true;\r\n\t\t\t\t\tthis.graphList = preparedGraphList;\r\n\t\t\t\t}\r\n\t\t\t}).catch(err => console.log(err));\r\n\t}\r\n\tprepareGraphList(graphList){\r\n\t\tlet preparedGraphList = graphList\r\n\t\t\t// .filter(graph => graph)\r\n\t\t\t.map(graph => this.prepareGraph(graph))\r\n\t\t\t.sort((g1, g2) => g2.timestamp - g1.timestamp);\r\n\t\tif(preparedGraphList === undefined) throw new Error('preparedGraphList is undefined');\r\n\t\treturn copyObj(preparedGraphList);\r\n\t}\r\n\tprepareGraph(graph){\r\n\t\tfor(let vertex of graph.vertexes){\r\n\t\t\tvertex.arcs = [];\r\n\t\t\tfor(let arc of graph.arcs){\r\n\t\t\t\tif(arc.vertex1.id === vertex.id && arc.vertex2.id === vertex.id) {\r\n\t\t\t\t\tvertex.arcs.push(arc.id);\r\n\t\t\t\t\tvertex.arcs.push(arc.id);\r\n\t\t\t\t} else if((arc.vertex1.id === vertex.id || arc.vertex2.id === vertex.id)) {\r\n\t\t\t\t\tvertex.arcs.push(arc.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn copyObj(graph);\r\n\t}\r\n\tonGraphCreated(newGraph){\r\n\t    newGraph.vertexes = [];\r\n\t    newGraph.arcs = [];\r\n\t    newGraph.timestamp = new Date().getTime();\r\n\r\n\t\tfetch(URL + '/api/v1/graph', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify(newGraph),\r\n\t\t\t...REQUEST_OPTIONS\r\n\t\t})\r\n\t\t\t.then(response => response.json()).catch(err => console.log(err))\r\n\t\t\t.then(data => {\r\n\t\t\t\tnewGraph.id = data.id;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tgraphs: [newGraph, ...this.state.graphs],\r\n\t\t\t\t\tgraphId: newGraph.id,\r\n\t\t\t\t});\r\n\t\t\t}).catch(err => console.log(err));\r\n    }\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<Tabs\r\n                    onTabChange={graphId => this.setState({graphId})}\r\n                    onGraphCreated={newGraph => this.onGraphCreated(newGraph)}\r\n                    graphs={this.state.graphs}\r\n\t\t\t\t\tgraphId = {this.state.graphId}\r\n                />\r\n\t\t\t\t{this.state.graphs.length !== 0 &&\r\n\t\t\t\t\t<Editor graphId={this.state.graphId} graphs={this.state.graphs}/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\n\n\nReactDOM.render(\n\t<Root/>,\n \tdocument.getElementById('root')\n);"],"sourceRoot":""}